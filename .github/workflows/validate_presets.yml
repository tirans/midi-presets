name: Validate MIDI Presets

on:
  push:
    paths:
      - 'devices/**/*.json'
  pull_request:
    paths:
      - 'devices/**/*.json'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for changed files detection

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -e .[dev]

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            devices/**/*.json

      - name: Validate changed files
        if: steps.changed-files.outputs.all_changed_files != ''
        run: |
          echo "Validating changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          python scripts/validate_presets.py ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Validate path restrictions
        if: steps.changed-files.outputs.all_changed_files != ''
        run: |
          echo "Checking path restrictions..."
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            # Ensure file is under devices/ directory
            if [[ ! $file =~ ^devices/ ]]; then
              echo "❌ Error: File $file is not under the devices/ directory"
              exit 1
            fi
            
            # Check directory depth (max 4 levels under devices/)
            depth=$(echo $file | tr -cd '/' | wc -c)
            if [[ $depth -gt 5 ]]; then  # devices/ + 4 more levels = 5 slashes max
              echo "❌ Error: File $file exceeds maximum directory depth (4 levels under devices/)"
              exit 1
            fi
            
            # Check file size (max 3MB)
            size=$(du -m "$file" | cut -f1)
            if [[ $size -gt 3 ]]; then
              echo "❌ Error: File $file exceeds maximum file size (3MB)"
              exit 1
            fi
          done
          echo "✅ All files passed path and size restrictions"